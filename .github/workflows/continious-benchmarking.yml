name: UnitsNet Benchmarks (auto)
on:  
  push:    
    branches: [master]    
    paths:
      - "UnitsNet/*"
      - "UnitsNet.Benchmark/*"
      - ".github/workflows/**"
      - ".github/actions/**"
      

env: 
  SCENARIO: Micro Baseline
  EXPORTERS: fulljson rplot
  CATEGORIES_FILTER: ''
  EXECUTION_OPTIONS: --job Short --disableLogFile # see https://benchmarkdotnet.org/articles/guides/console-args.html
  BENCHMARK_PAGES_BRANCH: gh-pages
  BENCHMARK_DATA_FOLDER: benchmarks
  STABLE_BASELINES: "UnitsNet.Benchmark.Baseline" # TODO could use something like *Perf_Double* or System.MathBenchmarks.Double* from dotnet/performance
jobs:
  benchmark:
    #if: github.repository_owner == 'angularsen' # (by default) the workflow doesn't need to run in a fork
    runs-on: windows-latest # required by the older frameworks
    strategy:
      matrix: 
        runtime: ["netcoreapp50", "netcoreapp21", "net472"]        
    steps:
      - run: echo Starting benchmarks for ${{ matrix.runtime }} 
      
      # checkout the current branch
      - uses: actions/checkout@v2
        with:
          path: UnitsNet
           
      # checkout the ResultRescaler
      - name: Checkout the ResultRescaler
        if: contains(env.SCENARIO, 'Baseline')
        uses: actions/checkout@v2
        with:
          repository: lipchev/performance
          path: performance
          
      # checkout the baseline branch
      - name: Checkout previous results 
        if: contains(env.SCENARIO, 'Baseline')
        uses: actions/checkout@v2
        with:
          ref: ${{ env.BENCHMARK_PAGES_BRANCH }}
          path: gh-pages
      
      # we need all frameworks (even if only running one target at a time)
      - uses: actions/setup-dotnet@v1
        with: 
          dotnet-version: '2.1.x'
            
      - uses: actions/setup-dotnet@v1
        with: 
          dotnet-version: '3.1.x'
            
      - uses: actions/setup-dotnet@v1
        with: 
          dotnet-version: '5.0.x'
      
      # executing the benchmark for the current framework(s)
      - name: Benchmark scenario execution (Micro)
        if: contains(env.SCENARIO, 'Micro')
        run: .\UnitsNet\UnitsNet.Benchmark\Scripts\run-micro-benchmarks.bat ${{ matrix.runtime }} --exporters ${{ env.EXPORTERS }} ${{ env.EXECUTION_OPTIONS }}
          
      - name: Benchmark execution (Gradient) 
        if: contains(env.SCENARIO, 'Gradient')
        uses: ./UnitsNet/.github/actions/run-benchmark-scenario
        with:
          scenario: run-gradient-benchmarks.bat
          runtimes: ${{ matrix.runtime }}
          exporters: ${{ env.EXPORTERS }}
          categories: ${{ env.CATEGORIES_FILTER }}
          execution-options: ${{ env.EXECUTION_OPTIONS }}
          
      
      - name: Benchmark scenario execution (Baseline)
        if: contains(env.SCENARIO, 'Baseline')
        run: .\UnitsNet\UnitsNet.Benchmark\Scripts\run-stable-baseline-benchmarks.bat ${{ matrix.runtime }} --exporters ${{ env.EXPORTERS }} ${{ env.EXECUTION_OPTIONS }}
                
      - name: Stable baseline comparison
        if: contains(env.SCENARIO, 'Baseline')
        env:
          PERFLAB_TARGET_FRAMEWORKS: net5.0
        run: |
          if (Test-Path .\gh-pages\${{ env.BENCHMARK_DATA_FOLDER }}\${{ matrix.runtime }}\Baseline ) {
            echo "Running the ResultRescaler using the original baseline"
            Get-ChildItem -Path .\gh-pages\${{ env.BENCHMARK_DATA_FOLDER }}\${{ matrix.runtime }}\Baseline *-report-rescaled.json -Recurse |
            % {Copy-Item -Force -Path $_.FullName -Destination $_.FullName.Replace("-report-rescaled.json", "-report-full.json") }
            dotnet run --project 'performance/src/tools/ResultRescaler' -c Release -f net5.0 `
            --base gh-pages\${{ env.BENCHMARK_DATA_FOLDER }}\${{ matrix.runtime }}\Baseline `
            --diff UnitsNet\Artifacts\Benchmark `
            --stable ${{ env.STABLE_BASELINES }} `
            --output UnitsNet\Artifacts\Benchmark          
          }else{
            echo "No previous baseline found (using current results)"
            Get-ChildItem -Path .\UnitsNet\Artifacts\Benchmark\ *-report-full.json -Recurse | % {Copy-Item -Path $_.FullName -Destination $_.FullName.Replace("-report-full.json", "-report-rescaled.json") }
            Get-ChildItem -Path .\UnitsNet\Artifacts\Benchmark\*\Baseline *-report-full.json -Recurse | % {Copy-Item -Path $_.FullName -Destination $_.FullName.Replace("-report-full.json", "-report-scale.json") }
          }      
                
      # saving the current artifact (downloadable until the expiration date of this action)        
      - name: Store micro benchmark artifact
        if: contains(env.SCENARIO, 'Micro')
        uses: actions/upload-artifact@v2
        with:
          name: UnitsNet Micro Benchmarks (${{ matrix.runtime }})
          path: UnitsNet\Artifacts\Benchmark\Micro
          
      - name: Store gradient benchmark artifact
        if: contains(env.SCENARIO, 'Gradient')
        uses: actions/upload-artifact@v2
        with:
          name: UnitsNet Gradient Benchmarks (${{ matrix.runtime }})
          path: UnitsNet\Artifacts\Benchmark\Gradient
          
      - name: Store baseline benchmark artifact
        if: contains(env.SCENARIO, 'Baseline')
        uses: actions/upload-artifact@v2
        with:
          name: UnitsNet Baseline Benchmarks (${{ matrix.runtime }})
          path: UnitsNet\Artifacts\Benchmark\Baseline
          
  publish-results:
    needs: [benchmark]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1 # cannot commit on the same branch in parallel
      matrix: 
        runtime: ["netcoreapp50", "netcoreapp21", "net472"]
    steps:        
      - name: Initializing git folder ️
        uses: actions/checkout@v2.3.1
        with:
          ref: ${{ env.BENCHMARK_PAGES_BRANCH }}
        
      # The benchmark results are downloaded into the corresponding 'scenario' folder.
      - name: Download micro benchmark artifact
        if: contains(env.SCENARIO, 'Micro')
        uses: actions/download-artifact@v2
        with:
          name: UnitsNet Micro Benchmarks (${{ matrix.runtime }})
          path: ${{ env.BENCHMARK_DATA_FOLDER }}/${{ matrix.runtime }}/Micro        
          
      - name: Download gradient benchmark artifact
        if: contains(env.SCENARIO, 'Gradient')
        uses: actions/download-artifact@v2
        with:
          name: UnitsNet Gradient Benchmarks (${{ matrix.runtime }})
          path: ${{ env.BENCHMARK_DATA_FOLDER }}/${{ matrix.runtime }}/Gradient  
          
      - name: Download baseline benchmark artifact
        if: contains(env.SCENARIO, 'Baseline')
        uses: actions/download-artifact@v2
        with:
          name: UnitsNet Baseline Benchmarks (${{ matrix.runtime }})
          path: ${{ env.BENCHMARK_DATA_FOLDER }}/${{ matrix.runtime }}/Baseline  

      - name: Git Auto Commit
        uses: stefanzweifel/git-auto-commit-action@v4.11.0
        with:
          commit_message: Automatic benchmark generation for ${{ github.sha }} (${{ matrix.runtime }})
    
  update-history:
    needs: [publish-results]
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1 # cannot commit on the same branch in parallel
      matrix: 
        runtime: ["netcoreapp50", "netcoreapp21", "net472"]
        benchmark: [Micro/Construction/QuantityFromUnit, Micro/Construction/UnitFromString, Micro/Construction/QuantityFromString, Micro/Comparison, Micro/Conversion/QuantityToValue, Micro/Conversion/QuantityToUnit, Micro/Conversion/QuantityToString, Micro/Init, Baseline/Construction, Baseline/Comparison, Baseline/Conversion/Value, Baseline/Conversion/String] 
        report: [report-full, report-rescaled]
    steps:        
      - name: Initializing git folder ️
        uses: actions/checkout@v2.3.1
        
      - name: Result path configuration
        id: path
        run: |
          $fname=${{ matrix.benchmark }}.replace('/', '-') + '-' + $ {{ matrix.report }} + '.json'
          echo $fname
          echo "::set-output name=FILE_NAME::$fname"
        
      # The latest results are downloaded from the gh-pages url into the 'Artifacts/Benchmark' folder.  
      - name: Fetch latest ${{ matrix.report }}
        id: report
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: ${{ github.actor }}.github.io/${{ github.event.repository.name }}/${{ env.BENCHMARK_DATA_FOLDER }}/${{ matrix.runtime }}/${{ matrix.benchmark }}/results/${{ steps.path.outputs.FILE_NAME }}
          location: Artifacts/Benchmark

      # appending to the running benchmark data on the benchmark-pages branch
      - name: Updating benchmark charts
        uses: starburst997/github-action-benchmark@v1.8.7
        with:
          name: UnitsNet Benchmarks (${{ matrix.runtime }})
          tool: 'benchmarkdotnet'
          output-file-path: ${{ steps.report.outputs.file-path }}
          gh-pages-branch: ${{ env.BENCHMARK_PAGES_BRANCH }}
          benchmark-data-dir-path: ${{ env.BENCHMARK_DATA_FOLDER }}/${{ matrix.runtime }}/${{ matrix.benchmark }}/history/${{ matrix.report }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          auto-push: true
          # Show alert with commit comment on detecting possible performance regression
          alert-threshold: '200%'
          comment-always: true
          comment-on-alert: true
          fail-on-alert: false
          alert-comment-cc-users: '@lipchev'
     
